{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-bar/search-bar.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBar","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mUAKaA,EAAO,SAACC,GAAD,OAClB,sBAAKC,UAAU,iBAAf,UACA,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACtB,mCAAML,EAAMI,QAAQE,KAApB,OACA,kCAAKN,EAAMI,QAAQG,MAAnB,WCLWC,G,MAAW,SAACR,GAAD,OACpB,qBAAKC,UAAY,YAAjB,SACKD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OACvB,cAAC,EAAD,CAAyBA,QAASA,GAArBA,EAAQC,WCHpBM,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACvB,uBACAZ,UAAU,SACVa,KAAK,SACLF,YAAcA,EACdG,SAAUF,MCmCGG,E,kDAtCb,aAAe,IAAD,8BACZ,gBAQFH,aAAe,SAACI,GACd,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAPtC,EAAKC,MAAQ,CACXb,SAAU,GACVU,YAAa,IALH,E,qDAad,WAAqB,IAAD,OAClBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAAET,SAAUkB,S,oBAG3C,WAAS,IAAD,EAC4BC,KAAKN,MAA/Bb,EADF,EACEA,SAAUU,EADZ,EACYA,YACZU,EAAmBpB,EAASqB,QAAQ,SAAA1B,GAAO,OAC/CA,EAAQE,KAAKyB,cAAcC,SAASb,EAAYY,kBAGlD,OACE,sBAAK9B,UAAU,MAAf,UACA,oDACE,cAAC,EAAD,CACEW,YAAY,kBACZC,aAAce,KAAKf,eAErB,cAAC,EAAD,CAAUJ,SAAUoB,W,GAjCVI,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.c0b76e04.chunk.js","sourcesContent":["import React from 'react';\n\nimport './card.style.css';\n\n\nexport const Card = (props) => (\n  <div className='card-container'>\n\t\t<img alt='monster' src={`https://robohash.org/${props.monster.id}?set=set1&size=180x180`}/>\n\t\t<h2> {props.monster.name} </h2>\n\t\t<p> {props.monster.email} </p>\n  </div>\n)","import React from 'react';\nimport { Card } from '../card/card.component'\nimport './card-list.styles.css';\n\nexport const CardList = (props) => (\n    <div className = 'card-list' >\n        {props.monsters.map(monster => (\n            <Card key = {monster.id} monster={monster}/>\n        ))}\n    </div>\n)\n\n","import React from 'react';\n\nimport './search-bar.styles.css';\n\nexport const SearchBar = ({ placeholder, handleChange }) => (\n  <input \n  className='search'\n  type='search' \n  placeholder= {placeholder}\n  onChange={handleChange}\n/>\n)","import './App.css';\nimport { Component } from 'react';\nimport { CardList } from './components/card-list/card-list.component'\nimport { SearchBar } from './components/search-bar/search-bar.component'\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = { \n      monsters: [],\n      searchField: ''\n    };\n  }\n\n  handleChange = (e) => {\n    this.setState({ searchField: e.target.value })\n  }\n  \n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => this.setState({ monsters: users}));\n}\n\n  render(){\n    const { monsters, searchField } = this.state;\n    const filteredMonsters = monsters.filter( monster =>\n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n    )\n\n    return(\n      <div className='App'>\n      <h1> Monsters Rolodex </h1>\n        <SearchBar\n          placeholder='search monsters' \n          handleChange={this.handleChange}\n        />\n        <CardList monsters={filteredMonsters}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}